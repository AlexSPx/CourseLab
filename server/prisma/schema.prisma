// This is your Prisma schema file,
// learn more about it in the docs: https://pris.ly/d/prisma-schema

datasource db {
  provider = "postgresql"
  url      = env("DATABASE_URL")
}

generator client {
  provider        = "prisma-client-js"
  previewFeatures = ["filterJson"]

}

model User {
  id         String  @id @default(uuid())
  email      String  @unique @db.VarChar(255)
  username   String  @unique
  first_name String?
  last_name  String?
  socials    Json?
  password   String
  isActive   Boolean @default(true)
  isVerified Boolean @default(false)
  isAdmin    Boolean @default(false)

  // Relation Fields
  courses        CourseEnrollment[]
  videoQuestions VideoQuestion[]
  documents      DocumentsOnUsers[]
  videos         VideoOnUser[]
  // sentMessages  Message[]

  @@map("user")
}

model Course {
  name        String  @id @unique
  public_name String?
  details     Json?
  published   Boolean @default(false)

  model ModelType @default(WEEKLY)
  weeks Int?

  scheduleType   ScheduleType @default(START_ON_JOIN)
  interval       Int?
  scheduledDates Json[]

  // Relation Fields
  ExtendedDetails CourseExtendedDetails?
  members         CourseEnrollment[]
  dataModels      CourseDataModel[]
  @@map("course")
}

model CourseExtendedDetails {
  images      String[]
  description String?
  sponsors    Json[]
  reviews     String[]


  course     Course @relation(fields: [courseName], references: [name], onDelete: Cascade)
  courseName String @id
}

model CourseEnrollment {
  id         String   @id @default(uuid())
  role       UserRole
  AssignedAt DateTime @default(now())
  startingAt DateTime @default(now())

  // Relation Fields
  user_id   String
  course_id String
  user      User   @relation(fields: [user_id], references: [id], onDelete: Cascade)
  course    Course @relation(fields: [course_id], references: [name], onDelete: Cascade)

  assignments AssignmentsOnUsers[]
  quizzes     QuizSubmit[]

  @@map("courseEnrollment")
}

model CourseDataModel {
  id    String   @id @default(uuid())
  name  String
  type  DataType
  props Json

  // Relation Fields
  document_id   String?     @unique
  document      Document?   @relation(fields: [document_id], references: [id], onDelete: Cascade)
  video_id      String?     @unique
  video         Video?      @relation(fields: [video_id], references: [id], onDelete: Cascade)
  course_id     String
  course        Course      @relation(fields: [course_id], references: [name], onDelete: Cascade)
  assignment_id String?     @unique
  assignment    Assignment? @relation(fields: [assignment_id], references: [id], onDelete: Cascade)
  quiz_id       String?     @unique
  quiz          Quiz?       @relation(fields: [quiz_id], references: [id], onDelete: Cascade)

  @@map("courseDataModel")
}

model Document {
  id   String @id @default(uuid())
  name String
  file Json

  // Relations
  courseDataModel CourseDataModel?
  members         DocumentsOnUsers[]
}

model DocumentsOnUsers {
  user        User     @relation(fields: [user_id], references: [id], onDelete: Cascade)
  user_id     String
  document    Document @relation(fields: [document_id], references: [id], onDelete: Cascade)
  document_id String
  role        FileRole
  AssignedAt  DateTime @default(now())

  @@id([user_id, document_id])
}

model Video {
  id     String  @id @default(uuid())
  name   String
  path   String?
  public Boolean @default(false)

  // Relations
  questions       VideoQuestion[]
  users           VideoOnUser[]
  courseDataModel CourseDataModel?
}

model VideoOnUser {
  id       String   @id @default(uuid())
  role     FileRole
  AssignedAt DateTime @default(now())
  user     User     @relation(fields: [user_id], references: [id], onDelete: Cascade)
  user_id  String
  video_id String
  video    Video    @relation(fields: [video_id], references: [id], onDelete: Cascade)
}

model VideoQuestion {
  id        String   @id @default(uuid())
  content   String
  timestamp Float?
  date      DateTime @default(now())
  answered  Boolean?
  is_answer Boolean?

  // Relations
  parentQuestion   VideoQuestion?  @relation("VideoQuestionToVideoQuestion", fields: [parentQuestionId], references: [id], onDelete: Cascade)
  parentQuestionId String?
  VideoAnswers     VideoQuestion[] @relation("VideoQuestionToVideoQuestion")
  video_id         String
  video            Video           @relation(fields: [video_id], references: [id], onDelete: Cascade)
  author_id        String
  author           User            @relation(fields: [author_id], references: [id], onDelete: Cascade)
}

model Assignment {
  id           String   @id @default(uuid())
  name         String
  content      String?
  files        String[]
  daysToSubmit Int?

  courseDataModel CourseDataModel?
  members         AssignmentsOnUsers[]
}

model AssignmentsOnUsers {
  enrollment    CourseEnrollment @relation(fields: [enrollment_id], references: [id], onDelete: Cascade)
  enrollment_id String
  assignment    Assignment       @relation(fields: [assignment_id], references: [id], onDelete: Cascade)
  assignment_id String
  role          AssignmentRole

  // relations
  submits AssignmentSubmits[]

  @@id([enrollment_id, assignment_id])
}

model AssignmentSubmits {
  id                 String              @id @default(uuid())
  dateOfSubmit       DateTime            @default(now())
  dateOfRemoval      DateTime?
  attachments        Json[]
  returned           Boolean             @default(false)
  comment            String?
  AssignmentsOnUsers AssignmentsOnUsers? @relation(fields: [enrollment_id, assignment_id], references: [enrollment_id, assignment_id], onDelete: Cascade)
  enrollment_id      String?
  assignment_id      String?
}

model Quiz {
  id          String  @id @default(uuid())
  name        String
  description String?

  questions       QuizQuestion[]
  submits         QuizSubmit[]
  courseDataModel CourseDataModel?
}

model QuizQuestion {
  id         String       @id @default(uuid())
  type       QuestionType
  question   String
  options    String[]
  answer     String[]
  points     Int?
  orderIndex Int

  Quizz    Quiz   @relation(fields: [quizz_id], references: [id], onDelete: Cascade)
  quizz_id String
}

model QuizSubmit {
  id           String   @id @default(uuid())
  answers      Json[]
  returned     Boolean  @default(false)
  points       Int
  maxPoints    Int
  dateOfSubmit DateTime @default(now())

  Quiz          Quiz             @relation(fields: [quiz_id], references: [id], onDelete: Cascade)
  quiz_id       String
  Enrollment    CourseEnrollment @relation(fields: [enrollment_id], references: [id], onDelete: Cascade)
  enrollment_id String
}

// model ChatRoom {
//   id String @id @default(uuid())
//   roomName String
// }

// model Message {
//   id Int @id @default(autoincrement())
//   text String
//   sentAt DateTime @default(now())

//   sender User @relation(fields: [sender_id], references: [id])
//   sender_id String 
   
// }

model Session {
  id        String   @id
  sid       String   @unique
  data      String
  expiresAt DateTime
}

enum ScheduleType {
  START_ON_JOIN
  INTERVAL
  SCHEDULE
}

enum QuestionType {
  CLOSED
  OPENED
}

enum FileRole {
  ADMIN
  EDITOR
  READER
}

enum AssignmentRole {
  ADMIN
  EDITOR
  STUDENT
}

enum UserRole {
  STUDENT
  TEACHER
  ADMIN
}

enum DataType {
  VIDEO
  DOCUMENT
  QUIZ
  ASSIGNMENT
}

enum ModelType {
  FREE
  WEEKLY
}
